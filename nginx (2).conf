worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;
        default_type text/html;
        location / {
            content_by_lua_block {
                ngx.say("HelloWorld")
            }
        }
        location /api/ {
            content_by_lua_block {
               ngx.say("hello api")
            }
        }
        location /api/test {
            content_by_lua_block {
                ngx.say("hello")
                ngx.sleep(3)
                ngx.say("the world")
            }
        }
        location /api/mysql/get {
            content_by_lua_block {
                local cjson = require "cjson"
                local arg = ngx.req.get_uri_args()
                local mysql = require "resty.mysql"
                local db,err = mysql:new()
                if not db then
                    ngx.say("failed to instantiate mysql : ",err)
                    return
                end
                local ok,err,errno,sqlstate = db:connect{
                    host="10.100.14.86",
                    prot=3306,
                    database="newSalt",
                    user="root",
                    password="saltOps@123"
                }
                if not ok then
                    ngx.say("failed to connect: ",err, ":",errno," ",sqlstate)
                    return
                end
                local res,err,errno,sqlstate = db:query(string.format([[SELECT * FROM deploy_testmodel WHERE name=%s]],arg.name))
                if not res then
                    ngx.say("bad result:",err, ": ",errno,": ",sqlstate,".")
                    return
                end
                local rest = {}
                local tmp = {}
                rest["status"] = 0
                for _, v in pairs(res) do
                    rest["cpu"] = v
                end
               ngx.say(cjson.encode(rest))
                ngx.say(cjson.encode(res))
            }
        }
        location /api/influx/post {
            content_by_lua_block {
                local i = require "resty.influx.influxdb"
                local cjson = require "cjson"
                local influx,err = i:new({
                    host = "10.100.14.86",
                    port = 8086,
                    proto = "http",
                    db = "zfj",
                    hostname = "cs-cmdb-test-zfj-3",
                    auth = "admin:admin@123",
                    }
                )
                if (not influx) then
                    ngx.say(err)
                    return
                end
                ngx.say("connect influxdb success")
                local arg = ngx.req.get_uri_args()
                local mdata = cjson.decode(arg.data)
                ngx.say(type(mdata.memory))
                influx:set_measurement("monitor")
                influx:add_tag("hostname",mdata.hostname)
                influx:add_field("memory_total", mdata.memory.total)
                influx:add_field("memory_free",mdata.memory.free)
                influx:add_field("memory_used",mdata.memory.used)
                influx:buffer()
                local ok,err = influx:flush()
                if (not ok) then
                    ngx.say(err)
                end
                ngx.say("insert success")
            }
        }
        location /api/influx/get {
            content_by_lua_block {
                local i = require "resty.influx.influxdb"
                local influx,err = i:new({
                    host = "10.100.14.86",
                    port = 8086,
                    db = "zfj",
                    hostname = "cs-cmdb-test-zfj-3",
                    auth = "admin:admin@123",
                    }
                )
               if not influx then
                   ngx.say(err)
                   return
               end
               ngx.say("connect query success")
               local ok,err = influx:do_read()
               if not ok then
                  ngx.say(err)
               end
            }
        }
        location /api/get {
            content_by_lua_block {
                local cjson = require "cjson"
                local res = {}
                local arg = ngx.req.get_uri_args()
                for _,v in pairs(arg) do
                    res = cjson.decode(v)
                end
                ngx.say("hostname: ",res.hostname," cpu: ",cjson.encode(res.cpu)," disk: ",cjson.encode(res.disk)," memory: ",cjson.encode(res.memory)) 
            }
        }
        location /api/mysql {
            content_by_lua_block {
                local mysql = require "resty.mysql"
                local cjson = require "cjson"
                local db,err = mysql:new()
                if not db then
                    ngx.say("failed to instantiate mysql: ",err)
                    return
                end
                local ok,err,errno,sqlstate = db:connect{
                    host="10.100.14.86",
                    prot=3306,
                    database="newSalt",
                    user="root",
                    password="saltOps@123"
                }
                if not ok then
                    ngx.say("failed to connect: ",err, ":",errno," ",sqlstate)
                    return
                end
                ngx.say("connected to mysql")
                local res = {}
                local arg = ngx.req.get_uri_args()
                for _,v in pairs(arg) do
                    res = cjson.decode(v)
                end
                ngx.say(cjson.encode(res))
                local res,err,errno,sqlstate = db:query(string.format([[insert into deploy_testmodel value('%s','%s','%s','%s','%s','%s')]],'%s',cjson.encode(res.disk),cjson.encode(res.memory),cjson.encode(res.cpu),res.hostname,res.create_time))
                if not res then
                    ngx.say("bad result:",err, ": ",errno,": ",sqlstate,".")
                    return
                end
                ngx.say("result: ",'True')
                db:set_keepalive(10000, 100)
            }
        }
    }
}

